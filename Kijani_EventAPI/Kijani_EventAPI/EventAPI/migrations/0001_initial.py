# Generated by Django 5.2.6 on 2025-10-05 19:03

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Event Category',
                'verbose_name_plural': 'Event Categories',
                'db_table': 'event_categories',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['slug'], name='event_categ_slug_60aed0_idx'), models.Index(fields=['is_active'], name='event_categ_is_acti_7c1496_idx')],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('description', models.TextField()),
                ('event_date', models.DateTimeField(db_index=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(max_length=300)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('capacity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('current_attendees', models.PositiveIntegerField(default=0)),
                ('allow_waitlist', models.BooleanField(default=False)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_free', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], db_index=True, default='upcoming', max_length=20)),
                ('is_published', models.BooleanField(db_index=True, default=True)),
                ('image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='EventAPI.eventcategory')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'ordering': ['-event_date'],
                'indexes': [models.Index(fields=['event_date', 'is_published'], name='events_event_d_066d21_idx'), models.Index(fields=['status'], name='events_status_8890b6_idx'), models.Index(fields=['organizer'], name='events_organiz_1c7a2e_idx'), models.Index(fields=['category'], name='events_categor_fd16be_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('capacity__gt', 0)), name='capacity_positive'), models.CheckConstraint(condition=models.Q(('current_attendees__gte', 0)), name='attendees_non_negative'), models.CheckConstraint(condition=models.Q(('price__gte', 0)), name='price_non_negative')],
            },
        ),
    ]
